g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(methpd="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(methpd="lm", size=2, se=FALSE, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth("lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
g
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight~Time | Diet . BodyWeight)
xyplot(Weight~Time | Diet . BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(BodyWeight)
str(BodyWeight)
head(BodyWeight)
library(datasets)
data("airquality")
summary(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
library(ggplot2movies)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month) + geom_smooth()
summary(movies)
load(swirl)
load("swirl")
library(swirl)
swirl()
x <- rnorm(12, rep(1:3, each=4), 0.2)
x
x <- rnorm(12, rep(1:3, each=4))
x
rep(1:3, each=4)
r <- rep(1:3, each=4)
summary(r)
set.seed(1234)
x <- rnorm(12, rep(1:3, each=4), 0.2)
x
set.seed(1234)
y <- rnorm(12, 2, 0.2)
y
summary(x)
summary(y)
set.seed(1234)
z <- rnorm(12, rep(1:3, each=4), 0.2)
z
summary(z)
rep(c(1,2,1), each=4)
set.seed(1234)
x <- rnorm(12, rep(1:3, each=4), 0.2)
y <- rnorm(12, rep(c(1,2,1), each=4), 0.2)
x
y
plot(x, y, col="blue", pch=19, cex=2)
plot(x, y, col="blue", pch=19, cex=1)
plot(x, y, col="blue", pch=19, cex=2)
plot(x, y, col="blue", pch=19, cex=1)
plot(x, y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dataFrame
dist(dataFrame)
rdistxy <- as.matrix(dist(dataFrame))
rdistxy
dim(rdistxy)
diag(rdistxy)
diag(rdistxy) <- diag(rdistxy) + 100000
?which
class(rdistxy)
min(rdistxy)
ind <- which(rdistxy==min(rdistxy), arr.ind=TRUE)
ind
plot(x, y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
points(x[ind[1,1]], y[ind[1,1]], col="orange", pch=19, cex=2)
points(x[ind[1,]], y[ind[1,]], col="orange", pch=19, cex=2)
dim(ind)
x[ind[1,]]
x
y[ind[1,]]
ind[1,]
par(mfrow=c(1,2))
plot(x, y, col="blue", pch=19, cex=2, main="Data")
text(x+0.05, y+0.05, labels=as.character(1:12))
points(x[ind[1,]], y[ind[1,]], col="orange", pch=19, cex=2)
library(dplyr)
hclust
?hclust
hcluster <- dist(dataFrame) %>% hclust
class(hcluster)
hcluster
?as.dendrogram
dendro <- as.dendrogram(hcluster)
?cut.dendrogram
hcluster$height
cutDendro <- cut(dendro, h=(hcluster$height[1] + 0.00001))
class(cutDendro)
summary(cutDendro)
cutDendro
plot(cutDendro$lower[[11]], yaxt="n", main="Begin building tree")
order(rdistxy)
nextmin <- rdistxy[order(rdistxy)][3]
ind <- which(rdistxy == nextmin, arr.ind=TRUE)
ind
swirl()
library("swirl")
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
set.seed(1234)
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x, y, col="blue", pch=19, cex=2)
text(x+o.05, y+0.05, labels=as.character(1:12))
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x, y)
summary(dataFrame)
str(dataFraame)
str(dataFrame)
kmeansObj <- kmeans(dataFrame, centers=3)
names[kmeansObj]
names(kmeansObj)
kmeansObj
plot(kmeansObj)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
kmeansObj <- kmeans(dataMatrix, centers=3)
par(mfrow=c(1,2))
?t
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt="n", main="original Data")
t(dataMatrix)
dim(t(dataMatrix))
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt="n", main="Clustered data")
dataMatrix
exit()
exit
library(swirl)
swirl()
swirl()
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmobj$cluster, pch=19, cex=2)
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
set.seed(1234)
dataMatrix <- matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1, size=1, prob=0.5)
if (coinFlip) {
dataMatrix[i,  ] <- dataMarix[i, ] + rep(c(0, 3), each=5)
}
}
for (i in 1:40) {
coinFlip <- rbinom(1, size=1, prob=0.5)
if (coinFlip) {
dataMatrix[i,  ] <- dataMatrix[i, ] + rep(c(0, 3), each=5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
library(dplyr)
hh <- dist(dataMatrix) %>% hclust
dataMatrixOrdered <- dataMatrix[hh$cluster, ]
par(mfrow=c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow=c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab="Row Mean"w, ylab="Row", pch=19)
plot(rowMeans(dataMatrixOrdered), 40:1, xlab="Row Mean", ylab="Row", pch=19)
plot(colMeans(dataMatrixOrdered), xlab="column", ylab="column mean", pch=19)
svd1 <- svd(scale(dataMatrixOrdered))
svd1
names(svd1)
summary(svd1$v)
svd1$v
dim(svd1$v)
dim(svd1$u)
dim(svd1$d)
length(svd1$d)
approx <- with(svd1, outer(u[, 1], v[, 1]))
approx
dim(approx)
dim(dataMatrixOrdered)
svd1$d
library("swirl")
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcmp(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[, 1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myimage(a1)
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[, 562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- sub1[, 1:3]
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[, 10:12], maxCon))
mdist <- dist(sub1[, 10:12])
mdist <- dist(sub1[, c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kclust <- kmeans(sub1[, -c(562,563)], centers=6)
kClust <- kmeans(sub1[, -c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
library("swirl")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <-pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$date), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1$sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(x0sub, na.rm=TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm=TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[,2], xlim=c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg%mean.y, ]
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("~/R/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
str(data)
stepsPerDay <- with(data, tapply(steps, date, sum, na.rm=TRUE))
stepsPerDay
summary(stepsPerDay)
str(stepsPerDay)
names(stepsPerDay)
?hist
hist(stepsPerDay)
hist(stepsPerDay, xlab="Total Daily Steps")
hist(stepsPerDay, col="blue, xlab="Total Daily Steps", main="Histogram of Daily Number of Steps")
hist(stepsPerDay, col="blue", xlab="Total Daily Steps", main="Histogram of Daily Number of Steps")
hist(stepsPerDay, col="blue", xlab="Total Daily Steps", main="Histogram of Daily Total Steps")
mean(stepsPerDay)
median(stepsPerDay)
s <- summary(stepsPerDay)
class(s)
s
s[, c("Median", "Mean")]
s[c("Median", "Mean")]
library(xtable)
s <- summary(stepsPerDay)[c("Median, Mean")]
class(s)
xtable(s)
s <- data.frame(mean=mean(stepsPerDay), median=(stepsPerDay))
s
mean(stepsPerDay)
s <- data.frame(mean=mean(stepsPerDay), median=median(stepsPerDay))
s
xt <- xtable(s)
xt
row.names(s) <- "total.steps"
s
summary(data)
head(data)
meanPerInterval <- with(data, tapply(steps, interval, mean, na.rm=TRUE))
summary(meanPerInterval)
str(meanPerInterval)
class(meanPerInterval)
dim(meanPerInterval)
plot(x=names(meanPerInterval), y=meanPerInterval, type="l")
plot(x=names(meanPerInterval), y=meanPerInterval, type="l", xlab="Interval", ylab="Average Number of Steps")
which.max(meanPerInterval)
which.max(meanPerInterval, arrayInd=TRUE)
which.max(meanPerInterval, arr.ind=TRUE)
meanPerInterval[which.max(meanPerInterval)]
meanPerInterval[which.max(meanPerInterval),]
m<-meanPerInterval[which.max(meanPerInterval),]
m<-meanPerInterval[which.max(meanPerInterval)]
class(m)
m
names(m)
m
which(m)
names(m)
class(m)
value(m)
values(m)
m[1]
m[[1]]
?is.na
sum(is.na(data$steps))
medianbyDay <- with(data, tapply(steps, date, median, na.rm=TRUE))
medianbyDay
meanbyDay <- with(data, tapply(steps, date, mean, na.rm=TRUE))
meanbyDay
sumbyDay <- with(data, tapply(steps, date, sum, na.rm=TRUE))
sumbyDay
summary(data)
meanPerInterval
v <- ifelse(is.na(data$steps), round(meanPerInterval[[data$interval]]), data$Steps)
v <- ifelse(is.na(data$steps), round(meanPerInterval[data$interval]), data$Steps)
v <- ifelse(is.na(data$steps), round(meanPerInterval[[data$interval]), data$Steps)
v <- ifelse(is.na(data$steps), round(meanPerInterval[[data$interval]), data$Steps)
v <- ifelse(is.na(data$steps), round(meanPerInterval[[data$interval]]), data$Steps)
meanPerInterval
meanPerInterval[5]
meanPerInterval[[5]]
meanPerInterval["5"]
v <- ifelse(is.na(data$steps), round(meanPerInterval[c(data$interval)]), data$Steps)
meanPerInterval
class(meanPerInterval)
str(meanPerInterval)
function fill.na(x, i) { ifelse(is.na(x), meanPerInterval[as.character(i)], x)}
function fill(x, i) { ifelse(is.na(x), meanPerInterval[as.character(i)], x)}
fill.na <- function(x, i) { ifelse(is.na(x), meanPerInterval[as.character(i)], x)}
nv <- mapply(fill.na, data$steps, data$interval)
nv
fill.na <- function(x, i) { ifelse(is.na(x), round(meanPerInterval[as.character(i)]), x)}
nv <- mapply(fill.na, data$steps, data$interval)
nv
dim(nv)
length(nv)
dim(data)
data$steps
head(data)
imputed.steps <- mapply(fill.na, data$steps, data$interval)
imputed <- data.frame(imputed.steps, data$date, data$interval)
summary(imputed)
dim(imputed)
head(imputed)
colnames(data)
colnames(imputed) <- colnames(data)
head(imputed)
weekdays(as.date("2018-07-27"))
weekdays(as.Date("2018-07-27"))
weekdays(as.Date("2018-07-28"))
determine.day <- function(d) { ifelse(weekdays(as.Date(d) %in% c("Saturday", "Sunday")), "weekend", "weekday")}
determine.day("2018-07-27")
determine.day <- function(d) { ifelse(weekdays(as.Date(d)) %in% c("Saturday", "Sunday"), "weekend", "weekday")}
determine.day("2018-07-27")
determine.day("2018-07-28")
determine.day("2018-07-29")
determine.day("2018-07-30")
imputed$day <- sapply(imputed$date, determine.day)
head(imputed)
library(ggplot2)
g <- ggplot(imputed, aes(interval, steps))
g + stat_summary(fun.y=mean, geom="line") + facet_grid(day~.)
g + stat_summary(fun.y=mean, geom="line") + facet_grid(day~.) + xlab("interval(5 minutes") + ylab("average number of steps")
getwd()
knit_with_parameters('~/R/RepData_PeerAssessment1/PA1_template.Rmd')
